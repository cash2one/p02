
---------------------------------------------------------------------------------------------------
一、mysql设计的要求：
	1).能有标识 区分开 静态表和动态表，[比如：静态表名加base_];			
	2).重要：正式上线后，不能删除或修改字段，只能在最后添加字段。	
	3).所有表自增的字段 都叫 id(涉及到转换到mongodb的一些问题);
		——id 类型统一为 bigint(20)	
	4).注意设置正确的类型和缺省值；		
	5).所有表及其每个字段必须有明确的“注记”；			
	6).各表必须加上 相关的索引;	
	7).不使用表的联合查询(视图)。
	8).各表的命名规则和归类：
		db_admin: 	管理后台相关
				admin*
		db_center:	统一账号中心
				user*
		db_base:	基础属性数据
				base_*
		db_log:		日志数据(一般只写)
				log_* 
		db_game:	游戏内数据	
				其他表命名
---------------------------------------------------------------------------------------------------
二、系统开发的要求：
	1).基本流程：研究策划文档-->整理属性数据和功能流程-->设计通讯协议和数据表(和前端沟通)
			         -->模块编码(服务器、客户端、后台数据维护工具)-->调试和测试
	2).一定要注意 文档的撰写：表达明确、条理清楚、更新及时
		——有关文档，要放置在 项目目录 svn/code/server/xxm_server/doc下。
	3).mod_player协议处理后：
	   ——玩家状态(玩家进程状态status、local_ets + scene_ets和数据库)的改变原则：
		——不改变
		——save_online_changed(Status, Status1, Cmd)  	修改status、local_ets、scene_ets
		——save_local_online(Status1)			修改status、local_ets
		——save_player_table(Status1, Cmd)?: 		修改 ets+scene_ets和数据库
	4).元宝/铜钱等 的增加和扣除， 需要做统一接口，并记录相关日志。
	5).函数的简单注释要写清楚； 参数名 需要能明确理解；对于枚举类型的参数需要 说明每个值定义；
	6).不需要进程的，就不要设计启用进程模块；
	7).统计数据表记录数 使用：db_game:select_count(Table_name, Where_List)
	8).模块内数据访问规则：
		——尽量使用dictionary（put/get)
		——可使用 ets
	9).模块间数据访问规则：
		——尽量使用 cast异步方式，少使用call
		——减少模块间数据交换量(次数和字节数)
		——同节点可使用 ets
	10).尽量整理和使用 基础公共函数 (misc.erl、tool.erl)
	11).在所有模块(gen_server)的init()里必须加以下语句(用于进程监控)：
		misc:write_monitor_pid(self(),?MODULE, {...})
	    在terminate()里加：
		misc:delete_monitor_pid(self())
	12).涉及输出“中文字串”的地方，一定要在 include/language.hrl里做定义。以便以后支持多语言版本。
	13).原 db_agent.erl里的方法，最好按模块独立出来处理。例如：db_agent_player.erl
	14).mysql自增id改为 bigint(20),  erlang和flash 及通讯协议里都改为 64位。
---------------------------------------------------------------------------------------------------
三、服务端模块的分类和其他：
	1).全局共享模块: 
			mod_rank、mod_sale、mod_shop、mod_guild、mod_system等，提供“宽度”访问接口。
	2).玩家相关模块：
			socket接收进程(server_reader.erl)、
				mod_player、mod_bag、mod_battle、mod_task;
			 	mod_team(由队长创建)
			socket发送进程(mod_socket.erl)
	   基本业务处理流程：
			协议解析(proto/)
				-->协议处理(pp/)
					-->进程来处理(mod/)或直接调用基础库函数(lib/)（<== db_agent_*.erl）
						-->结果打包和发送（proto/）
	3).场景相关模块：mod_scene、mod_mon、mod_npc、mod_dungeon、mod_scene_agent
	4).节点间互访模块：mod_node_interface
	5).辅助模块： loglevel、misc_admin、misc_timer、db_agent等
---------------------------------------------------------------------------------------------------

四、svn commit的使用要求：
	1).在中午(11:30--12:00)和晚上(19:00--19:30), 按顺序做 update和commit。
           在群里 做“开始更新...” 和“结束更新！”标记。并 发布更新的主要内容。
	2).要保证 在本地编译通过后，才能 提交。
	3).提交时，svn的message需要明确写明修改的内容。

---------------------------------------------------------------------------------------------------